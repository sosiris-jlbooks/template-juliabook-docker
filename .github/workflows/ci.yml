name: CI with dynamic parallel matrix

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TIMEOUT: '-1'    # nbconvert timeout
  EXTRA_ARGS: ''   # Extra arguments for nbconvert
  PY_VER: '3.12'   # Python version
  CACHE_NUM: '1'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_NUM_THREADS: 'auto'
  JULIA_CI: 'true'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-julia.outputs.cache-primary-key }}
      jl-ver: ${{ steps.read_toml.outputs.value }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      id: cp
      with:
        python-version: ${{ env.PY_VER }}
    - name: Cache pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pip-${{ steps.cp.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
    - name: Install python packages
      if: ${{ steps.cache-pip.outputs.cache-hit != 'true' }}
      run: pip install -r requirements.txt
    - name: Read Julia version
      uses: SebRollen/toml-action@v1.0.2
      id: read_toml
      with:
        file: 'Manifest.toml'
        field: 'julia_version'
    - name: Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ steps.read_toml.outputs.value }}
        show-versioninfo: 'true'
    - name: Cache Julia packages
      uses: actions/cache/restore@v3
      id: cache-julia
      with:
        path: |
          ~/.julia
          !~/.julia/registries
        key: ${{ runner.os }}-julia-${{ steps.read_toml.outputs.value }}-${{ env.CACHE_NUM }}-${{ hashFiles('src/**','Project.toml', 'Manifest.toml')}}
        restore-keys: |
          ${{ runner.os }}-julia-${{ steps.read_toml.outputs.value }}-${{ env.CACHE_NUM }}-
    - name: Install Julia packages
      if: ${{ steps.cache-julia.outputs.cache-hit != 'true' }}
      env:
        PYTHON: ${{ env.pythonLocation }}/python
      run: |
        julia --project=@. --color=yes -e 'using Pkg, Dates; Pkg.instantiate(); Pkg.precompile(); Pkg.gc(collect_delay=Day(0))'
    - name: Save Julia packages
      uses: actions/cache/save@v3
      if: ${{ steps.cache-julia.outputs.cache-hit != 'true' }}
      with:
        path: |
          ~/.julia
          !~/.julia/registries
        key: ${{ steps.cache-julia.outputs.cache-primary-key }}
    - name: List notebooks as a JSON array
      id: set-matrix
      working-directory: docs
      run: echo "matrix=$(python -c 'import glob, json; print(json.dumps(glob.glob("**/*.ipynb", recursive=True)))')" >> "$GITHUB_OUTPUT"

  execute:
    needs: setup
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        # Notebooks need to be executed
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Restore notebook if present
        uses: actions/cache/restore@v3
        id: nb-cache
        with:
          path: docs/${{ matrix.notebook }}
          key: ${{ runner.os }}-notebook-${{ hashFiles(format('docs/{0}', matrix.notebook)) }}-${{ needs.setup.outputs.cache-key }}
      - name: Setup Python
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-python@v5
        id: cp
        with:
          python-version: ${{ env.PY_VER }}
      - name: Cache pip
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-pip-${{ steps.cp.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
      - name: Setup Julia
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ needs.setup.outputs.jl-ver }}
      - name: Restore Julia packages
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v3
        id: cache-julia
        with:
          path: |
            ~/.julia
            !~/.julia/registries
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Install IJulia kernel
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: julia --project=@. --color=yes -e 'using IJulia; installkernel("Julia", "--project=@.")'
      - name: Execute Notebook
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: >
          jupyter nbconvert --to notebook --execute --inplace ${{ env.EXTRA_ARGS }}
          --ExecutePreprocessor.timeout=${{ env.TIMEOUT }}
          --ExecutePreprocessor.kernel_name=julia-1.$(julia -e 'print(VERSION.minor)')
          docs/${{ matrix.notebook }}
      - name: Cache notebook
        uses: actions/cache/save@v3
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        with:
          path: docs/${{ matrix.notebook }}
          key: ${{ steps.nb-cache.outputs.cache-primary-key }}
      - name: Convert artifact Name
        id: art
        run: echo "name=$(echo ${{ matrix.notebook }} | sed 's/\//-/g')" >> "$GITHUB_OUTPUT"
      - name: Upload Notebook
        uses: actions/upload-artifact@v4
        with:
          name: notebook-${{ steps.art.outputs.name }}
          path: docs*/${{ matrix.notebook }}  # keep folder structure
          retention-days: 1

  render:
    needs: execute
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download notebooks
        uses: actions/download-artifact@v4
        with:
          path: out/
      - name: Copy back built notebooks
        run: for d in out/notebook-*; do cp --verbose -rf "$d"/docs/* docs/; done
      - name: Setup Python
        uses: actions/setup-python@v5
        id: cp
        with:
          python-version: ${{ env.PY_VER }}
      - name: Cache pip
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-pip-${{ steps.cp.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
      - name: Build website
        run: jupyter-book build docs/
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html/

  # CI conclusion for GitHub status check
  # Adaped from https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: render
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ ${{ needs.render.result }} == "success" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  # Deployment job
  deploy:
    name: Deploy to GitHub pages
    needs: render
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

name: CI with dynamic parallel matrix

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write
  contents: write
  pull-requests: write

env:
  JULIA_CACHE: '1'
  TIMEOUT: '-1'

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sosiristseng/juliabook:1.8.5.7
      env:
        JULIA_NUM_THREADS: 'auto'
        # Let PythonCall use built-in python
        JULIA_CONDAPKG_BACKEND: 'Null'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache Julia dependencies
        uses: actions/cache@v3
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('**/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-
      - name: Install Julia dependencies
        run: |
          julia --color=yes --project="" -e 'import Pkg; Pkg.Registry.update(); Pkg.add("IJulia"); Pkg.build("IJulia")'
          julia --color=yes --project=@. -e 'import Pkg;  Pkg.instantiate(); Pkg.resolve(); Pkg.precompile()'
      - name: List notebooks as a JSON array
        id: set-matrix
        working-directory: docs
        run: echo "matrix=$(python -c 'import glob, json; print(json.dumps(glob.glob("**/*.ipynb", recursive=True)))')" >> $GITHUB_OUTPUT

  execute:
    needs: setup
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        # Notebooks need to be executed
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sosiristseng/juliabook:1.8.5.7
      env:
        JULIA_NUM_THREADS: 'auto'
        # Let PythonCall use built-in python
        JULIA_CONDAPKG_BACKEND: 'Null'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache Julia dependencies
        uses: actions/cache@v3
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('**/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-
      - name: Install Julia dependencies
        run: |
          julia --color=yes --project="" -e 'import Pkg; Pkg.Registry.update(); Pkg.add("IJulia"); Pkg.build("IJulia")'
          julia --color=yes --project=@. -e 'import Pkg;  Pkg.instantiate(); Pkg.resolve(); Pkg.precompile()'
      - name: Execute Notebook
        run: >
          jupyter nbconvert --to notebook --execute --inplace
          --ExecutePreprocessor.timeout=${{ env.TIMEOUT }}
          --ExecutePreprocessor.kernel_name="julia-$(julia -e 'print(VERSION.major, ".", VERSION.minor)')"
          docs/${{ matrix.notebook }}
      - name: Upload Notebook
        uses: actions/upload-artifact@v3
        with:
          name: notebook
          path: docs*/${{ matrix.notebook }}  # keep folder structure
          retention-days: 1

  jupyter-book:
    needs: execute
    runs-on: ubuntu-latest
    # output success flag for CI
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    env:
      PYTHON_VER: '3.11'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Download notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebook
          path: out/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: out
      - name: Move notebooks
        run: mv -v out/docs/* docs/
      - name: Disable code cell execution
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.execute.execute_notebooks = "off"' 'docs/_config.yml'
      - name: Build website
        run: pipx run jupyter-book build docs/
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/_build/html
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  # CI conclusion for GitHub status check
  # https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: jupyter-book
    if: always()
    runs-on: ubuntu-latest
    steps:
      # pass step only when output of previous jupyter-book job is set
      # in case at least one of the execution fails, jupyter-book is skipped
      # and the output will not be set, which will then cause the ci job to fail
      - run: |
          passed="${{ needs.jupyter-book.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  binder:
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}:binder
      PYTHON_VER: '3.11'
    steps:
      - name: Checkout notebook branch
        uses: actions/checkout@v3
      - name: Setup Python ${{ env.PYTHON_VER }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Remove binder dockerfile if present
        run: rm .binder/Dockerfile || true
      - name: Install repo2docker
        run:
          pip install -U pip setuptools wheel
          pip install https://github.com/jupyterhub/repo2docker/archive/main.zip
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Image
        run: docker pull ${{ env.IMAGE_NAME }} || true
      - name: Build binder image with repo2docker
        run: >
          jupyter-repo2docker
          --image-name ${{ env.IMAGE_NAME }}
          --cache-from ${{ env.IMAGE_NAME }}
          --push --no-run
          .
      - name: Add back binder folder and Dockerfile
        run: |
          mkdir -p .binder
          echo "FROM ${{ env.IMAGE_NAME }}" > .binder/Dockerfile
      - name: Create Pull Request if binder Dockerfile has changed
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          title: Binder Dockerfile
          add-paths: .binder/Dockerfile
          branch: binder-dockerfile

  # Deployment job
  deploy:
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

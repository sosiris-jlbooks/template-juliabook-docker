name: CI with dynamic parallel matrix

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write
  contents: write

env:
  JULIA_CACHE: '1'
  TIMEOUT: '-1'

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sosiristseng/juliabook:1.8.5.7
      env:
        JULIA_NUM_THREADS: 'auto'
        # Let PythonCall use built-in python
        JULIA_CONDAPKG_BACKEND: 'Null'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Restore Julia dependencies
        id: restore-cache
        uses: actions/cache/restore@v3
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('*.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-
      - name: Install Julia dependencies
        run: |
          julia --color=yes --project="" -e 'import Pkg; Pkg.Registry.update(); Pkg.add("IJulia"); Pkg.build("IJulia")'
          julia --color=yes --project=@. -e 'import Pkg;  Pkg.instantiate(); Pkg.resolve(); Pkg.precompile()'
      - name: Save Julia dependencies
        uses: actions/cache/save@v3
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' && env.JULIA_CACHE != '0' }}
        with:
          path: ~/.julia
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
      - name: List notebooks as a JSON array
        id: set-matrix
        working-directory: docs
        run: echo "matrix=$(python -c 'import glob, json; print(json.dumps(glob.glob("**/*.ipynb", recursive=True)))')" >> $GITHUB_OUTPUT

  execute:
    needs: setup
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        # Notebooks need to be executed
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sosiristseng/juliabook:1.8.5.7
      env:
        JULIA_NUM_THREADS: 'auto'
        # Let PythonCall use built-in python
        JULIA_CONDAPKG_BACKEND: 'Null'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Restore Julia dependencies
        id: restore-cache
        uses: actions/cache/restore@v3
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('*.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-
      - name: Install Julia dependencies
        run: |
          julia --color=yes --project="" -e 'import Pkg; Pkg.Registry.update(); Pkg.add("IJulia"); Pkg.build("IJulia")'
          julia --color=yes --project=@. -e 'import Pkg;  Pkg.instantiate(); Pkg.resolve(); Pkg.precompile()'
      - name: Execute Notebook
        run: >
          jupyter nbconvert --to notebook --execute --inplace
          --ExecutePreprocessor.timeout=${{ env.TIMEOUT }}
          --ExecutePreprocessor.kernel_name="julia-$(julia -e 'print(VERSION.major, ".", VERSION.minor)')"
          docs/${{ matrix.notebook }}
      - name: Upload Notebook
        uses: actions/upload-artifact@v3
        with:
          name: notebook
          path: docs*/${{ matrix.notebook }}  # keep folder structure
          retention-days: 1

  jupyter-book:
    needs: execute
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sosiristseng/docker-jupyterbook:0.15.1.4
    # output success flag for CI
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebook
          path: out/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: out
      - name: Move notebooks
        run: mv -v out/docs/* docs/
      - name: Build website
        run: jupyter-book build docs/
      - name: Copy environment files for binder
        env:
          DEST: docs/_build/html/_sources
        run: |
          cp *.txt $DEST || true
          cp Project.toml Manifest.toml $DEST
          cp -R src $DEST
      - name: Deploy Notebooks
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html/
          force_orphan: true
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  # CI conclusion for GitHub status check
  # https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: jupyter-book
    if: always()
    runs-on: ubuntu-latest
    steps:
      # pass step only when output of previous jupyter-book job is set
      # in case at least one of the execution fails, jupyter-book is skipped
      # and the output will not be set, which will then cause the ci job to fail
      - run: |
          passed="${{ needs.jupyter-book.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  binder:
    needs: jupyter-book
    if: ${{ github.ref == 'refs/heads/main' }}
    uses: sosiristseng/juliabook/.github/workflows/binder.yml@main
    with:
       dir: _sources
       ref: gh-pages
